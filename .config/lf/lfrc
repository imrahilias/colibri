#!/bin/false
# lf config

#              |  _)
#   _ \  __ \  __| |  _ \  __ \   __|
#  (   | |   | |   | (   | |   |\__ \
# \___/  .__/ \__|_|\___/ _|  _|____/
#       _|

# Interpreter for shell commands
set shell sh

# Set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# When this option is enabled, search command patterns are considered as globs,
# otherwise they are literals. With globbing, '*' matches any sequence, '?'
# matches any character, and '[...]' or '[^...]' matches character sets or
# ranges. Otherwise, these characters are interpreted as they are.
# Collides with 'incfilter'/'incsearch'.
#set globsearch true

# List of hidden file glob patterns. Patterns can be given as relative or
# absolute paths. To add multiple patterns, use ':' as a separator.
set hiddenfiles ".*:*~:*#:*.bak:/home/m/Downloads:/home/m/license:/home/m/readme.md:/home/m/explicit_filter.restore"

# Jump to the first match after each keystroke during searching.
set incsearch true

# Apply filter pattern after each keystroke during filtering.
set incfilter true

# Previewer script: Either a very simple shell script covering some
# archives, and highlighting text files "preview.sh", or the very
# extensive "scope.sh" from ranger, covering many extensions but
# depending on many programs.
# simple:
# set previewer "~/.config/lf/preview.sh"
# rangers scope.sh directly:
# set previewer "~/.config/lf/scope.sh"
# rangers scope.sh with wrapper:
# set previewer "~/.config/lf/scope-lf-wrapper.sh"

# preview + images via ueberzug with a ranger inspired new shell script:
set previewer "~/.config/lf/preview_images.sh"
set cleaner "~/.config/lf/cleaner.sh"

# preview + images via ctpv; might be faster but not as configurable:
# set previewer ctpv
# set cleaner ctpvclear
# &ctpv -s $id
# &ctpvquit $id

# icons:
#curl https://raw.githubusercontent.com/gokcehan/lf/master/etc/icons.example -o ~/.config/lf/icons
set icons true

set ratios "1:2:3"


#                                                 |
#   __|  _ \  __ `__ \  __ `__ \   _` | __ \   _` |  __|
#  (    (   | |   |   | |   |   | (   | |   | (   |\__ \
# \___|\___/ _|  _|  _|_|  _|  _|\__,_|_|  _|\__,_|____/
#

# $f ... focussed file.
# $fs ... selected files, empty if none.
# $fx ... selected files, focussed file if none selected.


# use this to dereference links of many files:
# for file in $fs
# do
#     test -L $file && fm+=$(readlink -file $f)
# done
# echo $fm

# Custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

# # Custom 'open' command, in background to prevent flicker:
# cmd open &{{
#     test -L $fx && fx=$(readlink -f $fx)
#     case $(file --mime-type -Lb $f) in
#         text/*|inode/x-empty) $lf -remote "send $id \$nvim -O \$fx";;
#         *) $lf -remote "send $id openwith \$fx";;
#     esac
# }}

# fire up rangers rifle:
#cmd open $rifle -p 0 $fx

# fire up rangers rifle, in background to prevent flicker:
cmd open &{{ $lf -remote "send $id \$rifle -p 0 \$fx" }}

# ranger like rifle preview:
cmd openwith ${{
                  clear
                  set -f
                  rifle -l $fx | sed -e "s/:[a-Z]*:[a-Z]*:/ \| /"
                  num=$(rifle -l $fx | wc -l)
                  if [[ $num -lt 10 ]]
                  then
                      read -n1 method
                  else
                      read -n2 method
                  fi
                  rifle -p $method $fx
              }}

# convert markdown files to emacs org mode format:
cmd mdorg &{{
               for f in $fx
               do
                   path="$f"
                   file="${path##*/}"
                   mime="$(file --dereference --brief --mime-type -- "$f")"
                   name="${file%%.*}" # shell escape
                   ext="${file#*.}" # shell escape; "example.tar.gz" gives "tar.gz"
                   echo $path $file $name $ext $mime
                   if [[ $ext == "md" && $mime == "text/plain" ]]
                   then # convert to org file and make the original hidden:
                       #pandoc -f markdown -t org -o ${name}.org ${f} && mv ${name}.${ext} .${name}.${ext}
                       pandoc -f markdown -t org ${f} | sed '/^:/ d' > ${name}.org && mv ${name}.${ext} .${name}.${ext}
                   fi
               done
           }}


# Custom 'chmod' command:
# Prompt in lf '%' but oen in shell '$' via remote.
cmd chmod %{{
               read ans
               $lf -remote "send $id \$chmod $ans \$fx"
               $lf -remote "send reload"
           }}

# Custom 'chown' command:
# Prompt in lf '%' but oen in shell '$' via remote.
cmd chown %{{
               read ans
               $lf -remote "send $id \$chown $ans \$fx"
               $lf -remote "send reload"
           }}

# grep glob in selected files or pwd, nonrecursive, only visible files:
cmd grepit %{{
                read ans
                $lf -remote "send $id \$grep -Hirn --color=always --exclude-dir='.*' --exclude='*~' --exclude='#*#' -- $ans * | less"
            }}

# grep glob in selected files or pwd, recursive, all files:
cmd grepitall %{{
                   read ans
                   $lf -remote "send $id \$grep -Hirn --color=always -- $ans * | less"
               }}

# breaks on many selected files?!
# cmd grepit %{{
#                 read ans
#                 # cwd or are files selected to search in?
#                 if [ -z "$fs" ]; then # use cwd:
#                     loc="*"
#                 else # use files
#                     loc="$fs"
#                 fi
#                 # breaks on many selected files?!
#                 $lf -remote "send $id \$grep -Hirn --color=always --exclude-dir='.*' --exclude='*~' --exclude='#*#' -- $ans $loc | less"
#             }}

# # breaks on many selected files?!
# cmd grepitall %{{
#                    read ans
#                    # cwd or are files selected to search in?
#                    if [ -z "$fs" ]; then # use cwd:
#                        loc="*"
#                    else # use files
#                        loc=$fs
#                    fi
#                    $lf -remote "send $id \$grep -Hirn --color=always -- $ans $loc | less"
#                }}

# find specific filename in cwd recursively:
cmd findall %{{
                   read ans
                   $lf -remote "send $id \$find . -iname "*$ans*"  | less -r"
               }}

# if you want to jump to a file or directory in lf using fuzzy
# matching, you can utilize fzf for this purpose:
cmd fzfjump ${{
    #res="$(find . -maxdepth 10 | fzf --reverse --header="Jump to location")"
    res="$(find . | fzf --reverse --header="Jump to location")"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}


# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
                 set -f
                 case $f in
                     *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
                     *.tar.gz|*.tgz) tar xzvf $f;;
                     *.tar.xz|*.txz) tar xJvf $f;;
                     *.zip) unzip $f;;
                     *.rar) unrar x $f;;
                     *.7z) 7z x $f;;
                 esac
             }}

# compress current file or selected files with tar and gunzip
cmd tar ${{
             set -f
             mkdir $1
             cp -r $fx $1
             tar czf $1.tar.gz $1
             rm -rf $1
         }}

# compress current file or selected files with zip
cmd zip ${{
             set -f
             mkdir $1
             cp -r $fx $1
             zip -r $1.zip $1
             rm -rf $1
         }}

cmd moveto ${{
	        clear; tput cup $(($(tput lines)/3)); tput bold
	        set -f
	        clear; echo "Move to where?"
	        dest="$(fzf)" &&
	            for x in $fx
                    do
		        eval mv -iv \"$x\" \"$dest\"
	            done
            }}

cmd copyto ${{
	        clear; tput cup $(($(tput lines)/3)); tput bold
	        set -f
	        clear; echo "Copy to where?"
	        dest="$(fzf)" &&
	            for x in $fx
                    do
		        eval cp -ivr \"$x\" \"$dest\"
	            done
            }}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                line="$(printf '%s' "$line" | sed 's/\\/\\\\/g;s/"/\\"/g')"
                lf -remote "send $id echo \"$line\""
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd bulkrename ${{
                    tmpfile_old="$(mktemp)"
                    tmpfile_new="$(mktemp)"

                    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

                    echo "$fs" > "$tmpfile_old"
                    echo "$fs" > "$tmpfile_new"
                    $EDITOR "$tmpfile_new"

                    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

                    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
                    do
                        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
                    done

                    rm -f "$tmpfile_old" "$tmpfile_new"
                    lf -remote "send $id unselect"
                }}


# git info:
cmd on-cd &{{
               bash -c '
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    git=$(__git_ps1 " (%s)")
    #fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f$git\033[0m"
    fmt="\033[0m\033[1m%d%f$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
    '
           }}

# show config:
cmd key ${{
             $PAGER ~/.config/lf/lfrc
         }}

# doc
cmd doc $$lf -doc | $PAGER


# Combining fzf with ripgrep, you can interactively search in the
# contents of files under the current directory and select a file from
# the results:
cmd fzfsearch ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    fzf --ansi --disabled --layout=reverse  --delimiter=: \
        --border=none --color=dark --no-info --no-separator \
        --color='prompt:magenta' \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind='enter:become(lf -remote "send $id select \"$(printf "%s" {1} | sed '\''s/\\/\\\\/g;s/"/\\"/g'\'')\"")' \
        --preview-window=border-none \
        --preview='~/.config/lf/preview_images.sh {1}'
}}

# Use your favorite previewer here (bat, source-highlight, etc.), for example:
#--preview='cat -- {1}'

# not sure what that does:
##--preview-window='+{2}-/2' \

# nice syntax highligh:
#--preview='bat --style plain --theme "OneHalf" --color=always --highlight-line={2} -- {1}'

## Alternatively you can even use the same previewer you've configured for lf:
#--preview='~/.config/lf/preview.sh {1}'

# other stuff
#--header="Search everywhere"

#
#  __ `__ \   _ \  |   |  __|  _ \
#  |   |   | (   | |   |\__ \  __/
# _|  _|  _|\___/ \__,_|____/\___|
#

# If the 'mouse' option is enabled, mouse buttons have the following default effects:
# Left mouse button:
#    Click on a file or directory to select it.
# Right mouse button:
#    Enter a directory or open a file. Also works on the preview window.
# Scroll wheel:
#    Move up or down. If Ctrl is pressed, scroll up or down.

set mouse true

# enter on middle click: good at vsc, bad at home...
map <m-3> :push <right>
#map <m-3> :toggle; down

# does not work, collides with builtin scroll, so use xbindkeys:
# map <m-8> :push <left>
# map <m-9> :push <right>

#  |
#  |  /  _ \ |   |  __|
#    <   __/ |   |\__ \
# _|\_\\___|\__, |____/
#            ____/

# the following additional keybindings are provided by default,
# unset predefined map by leaving it empty:

map <space> :toggle; down

map <a-right> :push <right>
map <a-left> :push <left>

map <backspace2>

#map <enter> shell
map <enter> :push <right>

# this wants to open dirs in emacs, i dont:
#map <enter> :cmd-enter; $lf -remote "send $id \$rifle -p 0 \$fx"

map <f-1> doc

# show the result of execution of previous commands:
map ` !true

#map , :set globsearch true; push :glob-select<space>
map , push :glob-select<space>

# recursive powerfull find written in go:
#map \\ push !fd<space>

#cmd fzf $(find . -name "$1" | fzf)
#map \\ push !fzf<space>

map \\ :fzfjump

map | :fzfsearch

map . set hidden!

map a rename
map A push %mkdir<space>

map b
map ba $git add $fx
map bA $git add -f $fx
map bc push !git<space>commit<space>-m<space>'
map bd !git diff --color=always $fx
map bD !git diff --color=always
map be $git restore $fx
map bE $git restore --cached $fx
map bl !git pull
map bo push $git<space>checkout<space>
map bp !git push
map br $git reset $fx
map bR $git reset
map bs !git -c color.status=always status
map bt $tig
map bu $git add -u
map bx $git rm $fx
map bX $git rm --cached $fx

map B
map Ba $git --git-dir=$HOME/.dotfiles --work-tree=$HOME add $fx
map BA $git --git-dir=$HOME/.dotfiles --work-tree=$HOME add -f $fx
map Bc push !git<space>--git-dir=$HOME/.dotfiles<space>--work-tree=$HOME<space>commit<space>-m<space>'
map Bd !git --git-dir=$HOME/.dotfiles --work-tree=$HOME diff --color=always $fx
map BD !git --git-dir=$HOME/.dotfiles --work-tree=$HOME diff --color=always
map Be $git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore $fx
map BE $git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore --cached $fx
map Bl !git --git-dir=$HOME/.dotfiles --work-tree=$HOME pull
map Bo push $git<space>--git-dir=$HOME/.dotfiles<space>--work-tree=$HOME<space>checkout<space>
map Bp !git --git-dir=$HOME/.dotfiles --work-tree=$HOME push
map Br $git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset $fx
map BR $git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset
map Bs !git --git-dir=$HOME/.dotfiles --work-tree=$HOME -c color.status=always status
map Bu $git --git-dir=$HOME/.dotfiles --work-tree=$HOME add -u
map Bx $git --git-dir=$HOME/.dotfiles --work-tree=$HOME rm $fx
map BX $git --git-dir=$HOME/.dotfiles --work-tree=$HOME rm --cached $fx

# do not have delete key! make sure this `e` comes before the `D`, or
# getting out of !whatever (eg. !git) with left arrow press tries to
# delete everything!
map D

map e
map ea !beautify_all
map eb %beautify $fx
#map ed $diff --color=always -u $fx | less
#map ed !dwdiff --color $fx | less
map ed $diff -u $fx | diff-so-fancy | less
#map ee $emacsclient -ca ''
#map ee $emacs $fx
#map ee push $emacs<space>
map ee push $emacsclient<space>-ca<space>''<space>
map ef !time gfortran -Og -Wall -fimplicit-none -fcheck=all -fbacktrace $fx
#map eg grepit # :fzfsearch does better!
#map eG grepitall # :fzfsearch does better!
map em :mdorg
map ep !adb push $fx storage/self/primary/
map eP !gnuplot $fx
map er !rmtmp
#map eu !du -h --apparent-size | sort -rh
map ex !time ./$fs

map f filter
map F setfilter # empty filter

map g/ cd /
map gc cd ~/.config
map gd cd /dev
map ge cd /etc
map gg cd ~
map gl cd ~/.config/lf
map gm cd /mnt/vsc
map go cd /opt
#map gs cd /opt/sw
map gt cd /tmp
map gu cd /usr
map gv cd ~/vsc

map i $LESSOPEN='| ~/.config/lf/preview.sh %s' less $fx

map m chmod
map M chown

map o push $<space><space>$fx<left><left><left><left>

map q ${{ $SHELL }}
map Q quit

map r openwith

map sa :set sortby atime; set info atime; set reverse true
map sc :set sortby ctime; set info ctime; set reverse true
map se :set sortby ext; set info; set reverse true
map sn :set sortby natural; set info; set reverse true
map ss :set sortby size; set info size; set reverse true
map st :set sortby time; set info time; set reverse true

map T $top

map u :unselect; glob-unselect; setfilter; clear

map w $htop

# execute current file (must be executable),
# w/o show output in pager and wait:
map x $$f
map X !$f

# copy selected file names, because no clipboard in terminal:
map Yn $printf "%s" "$fx" | xclip -selection clipboard

map za set info size:time
map zc set info
map zh set hidden!
map zi set icons!
map zl :set number false; set relativenumber!
map zn :set relativenumber false; set number!
map zp set preview!
map zr set reverse!
map zs set info size
map zt set info time
