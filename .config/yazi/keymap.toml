# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

# You can use the following shell variables in [run]:
# $n (Unix): The N-th selected file, starting from 1. e.g. $2 represents the second selected file.
# $@ (Unix): All selected files, i.e. $1, $2, ..., $n.
# $0 (Unix): The hovered file.


[manager]

keymap = [
# wanted; lf has that:
# ` show term
# map , push :glob-select<space>
# num + key: do smth repeatetly!

#{ on = "!", run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
{ on = "!", run = "plugin custom-shell --args='zsh --block --wait --interactive'", desc = "Run a shell command (block until finishes)" },

#{ on = "$", run = "shell --interactive", desc = "Run a shell command" },
{ on = "$", run = "plugin custom-shell --args='auto'", desc = "Run a shell command" },

{ on = ".", run = "hidden toggle", desc = "Toggle the visibility of hidden files" },

{ on = "/", run = "find --smart", desc = "Find next file" },

{ on = "1", run = "tab_switch 0", desc = "Switch to the first tab" },
{ on = "2", run = "tab_switch 1", desc = "Switch to the second tab" },
{ on = "3", run = "tab_switch 2", desc = "Switch to the third tab" },
{ on = "4", run = "tab_switch 3", desc = "Switch to the fourth tab" },
{ on = "5", run = "tab_switch 4", desc = "Switch to the fifth tab" },
{ on = "6", run = "tab_switch 5", desc = "Switch to the sixth tab" },
{ on = "7", run = "tab_switch 6", desc = "Switch to the seventh tab" },
{ on = "8", run = "tab_switch 7", desc = "Switch to the eighth tab" },
{ on = "9", run = "tab_switch 8", desc = "Switch to the ninth tab" },

#{ on = "<C-a>", run = "select_all --state=true", desc = "Select all files" },
#{ on = "<C-s>", run = "escape --search", desc = "Cancel the ongoing search" },
{ on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
{ on = "<C-d>", run = "arrow 50%", desc = "Move cursor down half page" },
{ on = "<C-f>", run = "arrow 100%", desc = "Move cursor down one page" },
{ on = "<C-u>", run = "arrow -50%", desc = "Move cursor up half page" },
{ on = "<C-v>", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },

{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<End>", run = "arrow 99999999",  desc = "Move cursor to the bottom" },

#{ on = "<Enter>", run = "open", desc = "Open selected files" },
{ on = "<Enter>", run  = "plugin smart-enter", desc = "Enter the child directory, or open the file" },

{ on = "<Esc>", run = "escape --all",  desc = "Exit visual mode, clear selected, or cancel search" },

{ on = "<F1>", run = "help", desc = "Open help" },

{ on = "<Home>", run = "arrow -99999999", desc = "Move cursor to the top" },

{ on = "<Left>", run = "leave",    desc = "Go back to the parent directory" },

{ on = "<PageDown>", run = "arrow 100%", desc = "Move cursor down one page" },

{ on = "<PageUp>", run = "arrow -100%", desc = "Move cursor up one page" },

#{ on = "<Right>", run = "enter", desc = "Enter the child directory" },
{ on = "<Right>", run  = "plugin smart-enter", desc = "Enter the child directory, or open the file" },

{ on = "<S-PageDown>", run = "arrow 50%", desc = "Move cursor down half page" },
{ on = "<S-PageUp>",   run = "arrow -50%", desc = "Move cursor up half page" },

{ on = "<Space>", run = [ "toggle --state=none", "arrow 1" ], desc = "Toggle the current selection state" },

{ on = "<Tab>", run = "tab_swap 1", desc = "Swap current tab with next tab" },

{ on = "<Up>", run = "arrow -1", desc = "Move cursor up" },

#{ on = "?", run = "find --previous --smart", desc = "Find previous file" },
{ on = "?", run = "plugin jump-to-char", desc = "Jump to char" },

{ on = "[", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },

{ on = "\\",        run  = "plugin fg --args='fzf'",  desc = "find file by filename (fuzzy match)"},

{ on = "]", run = "tab_switch 1 --relative",  desc = "Switch to the next tab" },

{ on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },

{ on = "|", run  = "plugin fg --args='rg'", desc = "find file by content (ripgrep match)"},
#{ on = "|", run  = "plugin fg --args='rga'", desc = "find file by content (ripgrep-all)"},
#{ on = "|", run  = "plugin fg", esc = "find file by content (fuzzy match)"},

{ on = "a", run = "rename --cursor=before_ext", desc = "Rename selected file(s)" },
{ on = "A", run = "create", desc = "Create a file (ends with / for directories)" },

{ on = [ "b", "a" ], run = '''shell --confirm 'git add "$@"'''' },
{ on = [ "b", "A" ], run = '''shell --confirm 'git add -f "$@"'''' },
{ on = [ "b", "c" ], run = '''shell --block --interactive 'git commit -m '''' },
{ on = [ "b", "d" ], run = '''shell --block --confirm 'git diff --color=always "$@" | less -R'''' },
{ on = [ "b", "D" ], run = '''shell --block --confirm 'git diff --color=always | less -R'''' },
{ on = [ "b", "e" ], run = '''shell --confirm 'git restore "$@"'''' },
{ on = [ "b", "E" ], run = '''shell --confirm 'git restore --cached "$@"'''' },
{ on = [ "b", "g" ], run = "plugin lazygit", desc = "run lazygit"},
{ on = [ "b", "l" ], run = '''shell --confirm 'git pull'''' },
{ on = [ "b", "o" ], run = '''shell --block --interactive 'git checkout '''' },
{ on = [ "b", "p" ], run = '''shell --block --confirm 'git push | less -R'''' },
{ on = [ "b", "r" ], run = '''shell --confirm 'git reset "$@"'''' },
{ on = [ "b", "R" ], run = '''shell --confirm 'git reset'''' },
{ on = [ "b", "s" ], run = '''shell --block --confirm 'git -c color.status=always status | less -R'''' },
{ on = [ "b", "t" ], run = "tig" },
{ on = [ "b", "u" ], run = '''shell --confirm 'git add -u'''' },
{ on = [ "b", "x" ], run = '''shell --confirm 'git rm "$@"'''' },
{ on = [ "b", "X" ], run = '''shell --confirm 'git rm --cached "$@"'''', desc = "deselect but keep file" },

{ on = [ "B", "a" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME add "$@"'''' },
{ on = [ "B", "A" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME add -f "$@"'''' },
{ on = [ "B", "c" ], run = '''shell --block --interactive 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME commit -m '''' },
{ on = [ "B", "d" ], run = '''shell --block --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME  diff --color=always "$@" | less -R'''' },
{ on = [ "B", "D" ], run = '''shell --block --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME  diff --color=always | less -R'''' },
{ on = [ "B", "e" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore "$@"''''  },
{ on = [ "B", "E" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME restore --cached "$@"''''  },
{ on = [ "B", "l" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME pull''''  },
{ on = [ "B", "o" ], run = '''shell --interactive 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME  checkout '''' },
{ on = [ "B", "p" ], run = '''shell --block --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME push | less -R''''  },
{ on = [ "B", "r" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset "$@"''''  },
{ on = [ "B", "R" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset''''  },
{ on = [ "B", "s" ], run = '''shell --block --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME -c color.status=always status | less -R'''' },
{ on = [ "B", "u" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME add -u'''' },
{ on = [ "B", "x" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME rm "$@"'''' },
{ on = [ "B", "X" ], run = '''shell --confirm 'git --git-dir=$HOME/.dotfiles --work-tree=$HOME rm --cached "$@"'''', desc = "deselect but keep file" },

{ on = "c", run = '''shell --confirm 'dragon-drop -x -T "$1"'''' },
{ on = "C", run = '''shell --confirm 'ripdrag -i "$1"'''' },

#{ on = "d", run = "remove", desc = "Trash selected files" },
{ on = "d", run = "yank --cut", desc = "Yank selected files (cut)" },
{ on = "D", run = "remove --permanently", desc = "Permanently delete selected files" },

{ on = [ "e", "b" ], run  = '''shell --confirm '/home/m/bin/beautify "$@"''''},
{ on = [ "e", "d" ], run  = "plugin diff", desc = "Diff the selected with the hovered file"},
{ on = [ "e", "f" ], run  = '''shell --confirm 'time gfortran -Og -Wall -fimplicit-none -fcheck=all -fbacktrace "$@"''''},
{ on = [ "e", "g" ], run  = '''shell --confirm 'gnuplot "$@"''''},
{ on = [ "e", "m" ], run  = '''shell --confirm '/home/m/bin/mdorg "$@"''''},
{ on = [ "e", "p" ], run  = '''shell --confirm 'adb push "$@" storage/self/primary/''''},
{ on = [ "e", "r" ], run  = '''shell --block --confirm '/home/m/bin/rmtmp''''},
{ on = [ "e", "s" ], run  = '''shell --block --confirm 'du -hs "$@" | less''''},
{ on = [ "e", "u" ], run  = '''shell --block --confirm 'du -h --apparent-size | sort -rh | less''''},
{ on = [ "e", "x" ], run  = '''shell --block --confirm 'time "$@" | less''''},

{ on = "f", run = "filter --smart", desc = "Filter files" },
{ on = "F", run = "escape --filter",  desc = "Exit filter" },

{ on = [ "g", "/" ], run = "cd /" },
{ on = [ "g", "<Space>" ], run = "cd --interactive" },
{ on = [ "g", "c" ], run = "cd ~/.config" },
{ on = [ "g", "d" ], run = "cd /dev" },
{ on = [ "g", "e" ], run = "cd /etc" },
{ on = [ "g", "g" ], run = "arrow -99999999", desc = "Move cursor to the top" },
{ on = [ "g", "h" ], run = "cd ~" },
{ on = [ "g", "o" ], run = "cd /opt" },
{ on = [ "g", "t" ], run = "cd /tmp" },
{ on = [ "g", "u" ], run = "cd /usr" },
{ on = [ "g", "v" ], run = "cd ~/vsc" },

{ on = "G", run = "arrow 99999999", desc = "Move cursor to the bottom" },

{ on = "h", run = "leave", desc = "Go back to the parent directory" },
{ on = "H", run = "back", desc = "Go back to the previous directory" },

{ on = "i", run  = "plugin max-preview", desc = "Maximize or restore preview" },
{ on = "I", run  = "plugin hide-preview", desc = "Hide or show preview" },

{ on = "j", run = "arrow 1", desc = "Move cursor down" },
{ on = "J", run = "seek 5", desc = "Seek down 5 units in the preview" },

{ on = "k", run = "arrow -1", desc = "Move cursor up" },
{ on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },

#{ on = "l", run = "enter", desc = "Enter the child directory" },
{ on = "l", run = "plugin smart-enter", desc = "Enter the child directory, or open the file" },
{ on = "L", run = "forward", desc = "Go forward to the next directory" },

{ on = "m", run  = "plugin chmod", desc = "Chmod on selected files"},

{ on = "n", run = "find_arrow", desc = "Go to the next found" },
{ on = "N", run = "find_arrow --previous", desc = "Go to the previous found" },

{ on = "o", run = "open --interactive", desc = "Open selected files interactively" },
{ on = "O", run = "plugin open-with-cmd --args=block", desc = "Open with command in the terminal"},

{ on = "p", run = "paste", desc = "Paste yanked files" },
#{ on = "p", run  = "plugin mart-paste", desc = "Paste into the hovered directory or CWD"},

#{ on = "P", run = "paste --force", desc = "Paste yanked files (overwrite if the destination exists)" },

#{ on = "q", run = "quit", desc = "Exit the process" },
{ on = "q", run  = 'shell "$SHELL" --block --confirm', desc = "Open shell here"},

#{ on = "s", run = "search fd", desc = "Search files by name using fd" },
{ on = [ "s", "a" ], run = "sort alphabetical --reverse=no",                   desc = "Sort alphabetically" },
{ on = [ "s", "A" ], run = "sort alphabetical --reverse",                      desc = "Sort alphabetically (reverse)" },
{ on = [ "s", "c" ], run = [ "sort created --reverse=no", "linemode ctime" ],  desc = "Sort by created time" },
{ on = [ "s", "C" ], run = [ "sort created --reverse", "linemode ctime" ],     desc = "Sort by created time (reverse)" },
{ on = [ "s", "e" ], run = "sort extension --reverse=no",                      desc = "Sort by extension" },
{ on = [ "s", "E" ], run = "sort extension --reverse",                         desc = "Sort by extension (reverse)" },
{ on = [ "s", "m" ], run = [ "sort modified --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
{ on = [ "s", "M" ], run = [ "sort modified --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
{ on = [ "s", "n" ], run = "sort natural --reverse=no",                        desc = "Sort naturally" },
{ on = [ "s", "N" ], run = "sort natural --reverse",                           desc = "Sort naturally (reverse)" },
{ on = [ "s", "r" ], run = "sort random --reverse=no",                         desc = "Sort randomly" },
{ on = [ "s", "s" ], run = [ "sort size --reverse=no", "linemode size" ],      desc = "Sort by size" },
{ on = [ "s", "S" ], run = [ "sort size --reverse", "linemode size" ],         desc = "Sort by size (reverse)" },

#{ on = "S", run = "search rg", desc = "Search files by content using ripgrep" },

{ on = "t", run = "tab_create --current", desc = "Create a new tab with CWD" },
{ on = "T", run = "plugin custom-shell --args='zsh --block --wait htop'", desc = "Run a shell command (block until finishes)" },

{ on = "u", run = "unyank", desc = "Cancel the yank status" },

{ on = "v", run = "toggle_all --state=none",  desc = "Inverse selection of all files" },
{ on = "V", run = "visual_mode", desc = "Enter visual mode (selection mode)" },

{ on = "w", run = "tasks_show", desc = "Show task manager" },

{ on = "y", run = "yank", desc = "Yank selected files (copy)" },

{ on = [ "Y", "c" ], run = '''shell 'echo "$@" | xclip -i -selection clipboard -t text/uri-list' --confirm''' },
{ on = [ "Y", "d" ], run = "copy dirname", desc = "Copy the directory path" },
{ on = [ "Y", "f" ], run = "copy filename", desc = "Copy the filename" },
{ on = [ "Y", "h" ], run = "hardlink", desc = "Hardlink yanked files" },
{ on = [ "Y", "l" ], run = "link", desc = "Symlink the absolute path of yanked files" },
{ on = [ "Y", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },
{ on = [ "Y", "p" ], run = "copy path", desc = "Copy the file path" },
{ on = [ "Y", "r" ], run = "link --relative", desc = "Symlink the relative path of yanked files" },

{ on = [ "z", "c" ], run = "linemode ctime",       desc = "Set linemode to ctime" },
{ on = [ "z", "m" ], run = "linemode mtime",       desc = "Set linemode to mtime" },
{ on = [ "z", "n" ], run = "linemode none",        desc = "Set linemode to none" },
{ on = [ "z", "o" ], run = "linemode owner",       desc = "Set linemode to owner" },
{ on = [ "z", "p" ], run = "linemode permissions", desc = "Set linemode to permissions" },
{ on = [ "z", "s" ], run = "linemode size",        desc = "Set linemode to size" },

#{ on = "Z", run = "plugin fzf", desc = "Jump to a directory or reveal a file using fzf" },

]

[tasks]

keymap = [
{ on = "<Esc>", run = "close", desc = "Close task manager" },
{ on = "<C-c>", run = "close", desc = "Close task manager" },
{ on = "w",     run = "close", desc = "Close task manager" },

{ on = "k", run = "arrow -1", desc = "Move cursor up" },
{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Enter>", run = "inspect", desc = "Inspect the task" },
{ on = "x",       run = "cancel",  desc = "Cancel the task" },

# Help
{ on = "~",    run = "help", desc = "Open help" },
{ on = "<F1>", run = "help", desc = "Open help" },
]

[select]

keymap = [
{ on = "<Esc>",   run = "close",         desc = "Cancel selection" },
{ on = "<C-c>",   run = "close",         desc = "Cancel selection" },
{ on = "<Enter>", run = "close --submit", desc = "Submit the selection" },

{ on = "k", run = "arrow -1", desc = "Move cursor up" },
{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

# Help
{ on = "~",    run = "help", desc = "Open help" },
{ on = "<F1>", run = "help", desc = "Open help" },
]

[input]

keymap = [
{ on = "<C-c>",   run = "close",         desc = "Cancel input" },
{ on = "<Enter>", run = "close --submit", desc = "Submit input" },
{ on = "<Esc>",   run = "escape",        desc = "Go back the normal mode, or cancel input" },

# Mode
{ on = "i", run = "insert",                           desc = "Enter insert mode" },
{ on = "a", run = "insert --append",                   desc = "Enter append mode" },
{ on = "I", run = [ "move -999", "insert" ],            desc = "Move to the BOL, and enter insert mode" },
{ on = "A", run = [ "move 999", "insert --append" ],     desc = "Move to the EOL, and enter append mode" },
{ on = "v", run = "visual",                           desc = "Enter visual mode" },
{ on = "V", run = [ "move -999", "visual", "move 999" ], desc = "Enter visual mode and select all" },

# Character-wise movement
{ on = "h",       run = "move -1", desc = "Move back a character" },
{ on = "l",       run = "move 1",  desc = "Move forward a character" },
{ on = "<Left>",  run = "move -1", desc = "Move back a character" },
{ on = "<Right>", run = "move 1",  desc = "Move forward a character" },
{ on = "<C-b>",   run = "move -1", desc = "Move back a character" },
{ on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

# Word-wise movement
{ on = "b",     run = "backward",             desc = "Move back to the start of the current or previous word" },
{ on = "w",     run = "forward",              desc = "Move forward to the start of the next word" },
{ on = "e",     run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },
{ on = "<A-b>", run = "backward",             desc = "Move back to the start of the current or previous word" },
{ on = "<A-f>", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },

# Line-wise movement
{ on = "0",      run = "move -999", desc = "Move to the BOL" },
{ on = "$",      run = "move 999",  desc = "Move to the EOL" },
{ on = "<C-a>",  run = "move -999", desc = "Move to the BOL" },
{ on = "<C-e>",  run = "move 999",  desc = "Move to the EOL" },
{ on = "<Home>", run = "move -999", desc = "Move to the BOL" },
{ on = "<End>",  run = "move 999",  desc = "Move to the EOL" },

# Delete
{ on = "<Backspace>", run = "backspace",              desc = "Delete the character before the cursor" },
{ on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
{ on = "<C-h>",       run = "backspace",        desc = "Delete the character before the cursor" },
{ on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

# Kill
{ on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
{ on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
{ on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
{ on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

# Cut/Yank/Paste
{ on = "d", run = "delete --cut",                           desc = "Cut the selected characters" },
{ on = "D", run = [ "delete --cut", "move 999" ],             desc = "Cut until the EOL" },
{ on = "c", run = "delete --cut --insert",                   desc = "Cut the selected characters, and enter insert mode" },
{ on = "C", run = [ "delete --cut --insert", "move 999" ],     desc = "Cut until the EOL, and enter insert mode" },
{ on = "x", run = [ "delete --cut", "move 1 --in-operating" ], desc = "Cut the current character" },
{ on = "y", run = "yank",          desc = "Copy the selected characters" },
{ on = "p", run = "paste",         desc = "Paste the copied characters after the cursor" },
{ on = "P", run = "paste --before", desc = "Paste the copied characters before the cursor" },

# Undo/Redo
{ on = "u",     run = "undo", desc = "Undo the last operation" },
{ on = "<C-r>", run = "redo", desc = "Redo the last operation" },

# Help
{ on = "~",    run = "help", desc = "Open help" },
{ on = "<F1>", run = "help", desc = "Open help" },
]

[confirm]
keymap = [
{ on = "<Esc>",   run = "close",         desc = "Cancel the confirm" },
{ on = "<C-c>",   run = "close",         desc = "Cancel the confirm" },
#{ on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

{ on = "n", run = "close",         desc = "Cancel the confirm" },
{ on = "y", run = "close --submit", desc = "Submit the confirm" },

{ on = "k", run = "arrow -1", desc = "Move cursor up" },
{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

# Help
{ on = "~",    run = "help", desc = "Open help" },
{ on = "<F1>", run = "help", desc = "Open help" },
]

[completion]

keymap = [
{ on = "<C-c>",   run = "close",                                  desc = "Cancel completion" },
{ on = "<Tab>",   run = "close --submit",                          desc = "Submit the completion" },
{ on = "<Enter>", run = [ "close --submit", "close_input --submit" ], desc = "Submit the completion and input" },

{ on = "<A-k>", run = "arrow -1", desc = "Move cursor up" },
{ on = "<A-j>", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<C-p>", run = "arrow -1", desc = "Move cursor up" },
{ on = "<C-n>", run = "arrow 1",  desc = "Move cursor down" },

# Help
{ on = "~",    run = "help", desc = "Open help" },
{ on = "<F1>", run = "help", desc = "Open help" },
]

[help]

keymap = [
{ on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
{ on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
{ on = "q",     run = "close",  desc = "Exit the process" },
{ on = "<C-c>", run = "close",  desc = "Hide the help" },

# Navigation
{ on = "k", run = "arrow -1", desc = "Move cursor up" },
{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

# Filtering
{ on = "f", run = "filter", desc = "Apply a filter for the help items" },
]
