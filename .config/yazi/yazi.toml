# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [ 1, 2, 3 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "none"
show_hidden    = false
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "îŠŽ  Yazi: {cwd} "

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""
image_delay     = 0
image_filter    = "nearest"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]


# $n : The N-th selected file, starting from 1. e.g. $2 represents the second selected file.
# $@ : All selected files, i.e. $1, $2, ..., $n.
# $0 : The hovered file.


# todo: write hexyl previewer for binary: fun!

[opener]
edit = [
{ run = 'emacs "$@"', orphan = true, block = false },
#{ run = '''emacsclient -ca '' "$@"''', orphan = true, block = false },
#{ run = '''emacsclient -ca '' "$@"''', desc = "emacsclient (block)", block = true },
#{ run = 'nvim "$@"', desc = "nvim (block)", block = true },
#{ run = 'vi "$@"', desc = "vi (block)", block = true },
#{ run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
]
open = [
#{ run = 'rifle -p 0 "$@"', for = "linux" },
#{ run = 'riffle "$1"', block = true, for = "linux" },
{ run = 'xdg-open "$@"', for = "linux" },
]
extract = [ { run = 'ya pub extract --list "$@"' }, ]
play = [
{ run = 'mpv --force-window -- "$1"', orphan = true },
{ run = 'vlc -- "$1"', orphan = true },
#{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true },
{ run = 'mediainfo "$1" | less -R', block = true },
]
web = [
{ run = 'firefox -- "$@"', orphan = true },
{ run = 'lynx -- "$@"', block = true },
]
black = [ { run = 'black -- "$@"', orphan = true }, ]
python = [ { run = 'python -- "$1"', block = true }, ]
octave = [
{ run = 'octave --gui --persist --eval "edit "$1""', desc = 'octave --gui --persist --eval "edit "$1""', orphan = true },
{ run = 'octave --force-gui --persist "$1"', desc = 'octave --force-gui --persist "$1"', orphan = true },
{ run = 'octave -- "$1"', desc = 'octave -- "$1"', block = true },
]
fortran = [ { run = 'time gfortran -Og -Wall -fimplicit-none -ftree-parallelize-loops=2048 -fopt-info -fcheck=all -fbacktrace "$1"', desc = 'time gfortran -Og -Wall -fimplicit-none -ftree-parallelize-loops=2048 -fopt-info -fcheck=all -fbacktrace "$1"', block = true }, ]
gnuplot = [ { run = 'gnuplot "$1"', orphan = true }, ]
pandoc = [ { run = 'pandoc -o "$1".pdf "$1"', orphan = true }, ]
jupyter = [
{ run = 'jupyter-lab "$@"', desc = 'jupyter-lab "$@"', orphan = true },
{ run = 'jupyter nbconvert --to markdown "$@"', desc = 'jupyter nbconvert --to markdown "$@"', orphan = true },
]
gimp = [ { run = 'gimp -- "$@"', orphan = true }, ]
make = [ { run = 'make -j 16 -f "$1"', block = true }, ]
nsys = [ { run = 'nsys-ui "$@"', orphan = true }, ]
view = [ { run = 'feh --auto-zoom --scale-down --start-at "$@"', desc = 'feh --auto-zoom --scale-down --start-at "$@"', orphan = true }, ]
hexyl = [ { run = 'hexyl -- "$1" | less -R ', block = true }, ]
exec = [ { run = "$1", block = true }, ]
#spotter can do that better, shows the current mime fetcher (ext or file).
mime = [
{ run = 'file -b --mime-type "$@" | less -R', block = true },
# { run = 'xdg-mime query filetype "$@" | less -R', block = true },
]

[open]
rules = [
# dir uses edit because of smart enter
{ name = "*/", use = [ "edit" ] },
# text
{ mime = "text/*", use = [ "edit" ] },
# image
{ mime = "image/*", use = [ "view", "gimp" ] },
# media
{ mime = "{audio,video}/*", use = [ "play" ] },
# archive
{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", use = "extract" },
# json
{ mime = "application/{json,ndjson}", use = "edit" },
{ mime = "*/javascript", use = "edit" },
# empty file
{ mime = "inode/empty", use = "edit" },
# code
{ name = "*.py", use = [ "python", "black" ] },
{ name = "*.m", use = "octave" },
{ name = "*.f??", use = "fortran" },
{ name = "*.gp", use = "gnuplot" },
{ name = "*.{md,org}", use = "pandoc" },
{ name = "*.ipynb", use = "jupyter" },
{ name = "*.nsys-rep", use = "nsys" },
{ name = "*{m,M}akefile", use = "make" },
# binary
{ mime = "application/pie-executable", use = "hexyl" },
# fallback
{ name = "*", use = [ "open", "exec", "edit", "mime" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512mb
image_bound      = [ 5000, 5000 ]
suppress_preload = false

[plugin]
fetchers = [
# git needs nightly:
{ id = "git", name = "*", run  = "git"},
{ id = "git", name = "*/", run  = "git"},
# mimetype
# needs additions in 'init.lua', cannot deal with '-' in file ext like 'nsys-rep'!
#{ id = "mime", name = "*", run  = "mime-ext", if = "!mime", prio = "high"},
{ id = "mime", name = "*", run = "mime", prio = "high" },
]

spotters = [
{ name = "*/", run = "folder" },
# Code
{ mime = "text/*", run = "code" },
{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
# Image
{ mime = "image/{avif,hei?,jxl}", run = "magick" },
{ mime = "image/svg+xml", run = "svg" },
{ mime = "image/*", run = "image" },
# Video
{ mime = "video/*", run = "video" },
# Fallback
{ name = "*", run = "file" },
]

preloaders = [
# image
{ mime = "image/{avif,hei?,jxl}", run = "magick" },
{ mime = "image/svg+xml", run = "svg" },
{ mime = "image/*", run = "image" },
# video
{ mime = "video/*", run = "video" },
# pdf
{ mime = "application/pdf", run = "pdf" },
# font
{ mime = "font/*", run = "font" },
{ mime = "application/ms-opentype", run = "font" },
]

previewers = [
# dir
#{ name = "*/", run = "folder", sync = true },
{ name = "*/", run = "folder" },
# ext
#{ name = "*.ipynb", run = "nbpreview" },
# { name = "*.csv", run = "rich-preview"}, # for csv files
# { name = "*.md", run = "rich-preview" }, # for markdown (.md) files
# { name = "*.rst", run = "rich-preview"}, # for restructured text (.rst) files
# { name = "*.ipynb", run = "rich-preview"}, # for jupyter notebooks (.ipynb)
# { name = "*.json", run = "rich-preview"}, # for json (.json) files
# mime
# code
#{ mime = "text/csv", run = "miller"},
{ mime = "text/*", run = "code" },
{ mime = "application/{mbox,javascript,wine-extension-ini}", run = "code" },
# json
{ mime = "application/{json,ndjson}", run = "json" },
# image
{ mime = "image/{avif,hei?,jxl}", run = "magick" },
{ mime = "image/svg+xml", run = "svg" },
{ mime = "image/*", run = "image" },
# video
{ mime = "video/*", run = "video" },
# pdf
{ mime = "application/pdf", run = "pdf" },
# archive
#{ mime = "application/{zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*}", run = "archive" },
{ mime = "application/{debian*-package,redhat-package-manager,rpm,android.package-archive}", run = "archive" },
{ name = "*.{AppImage,appimage}", run = "archive" },
{ mime = "application/{*zip,rar,7z*,tar,gzip,xz,zstd,bzip*,lzma,compress,archive,cpio,arj,xar,ms-cab*,iso9660-image,java-archive,vnd.rar}", run = "ouch" },
# virtual disk / disk image
{ mime = "application/{iso9660-image,qemu-disk,ms-wim,apple-diskimage}", run = "archive" },
{ mime = "application/virtualbox-{vhd,vhdx}", run = "archive" },
{ name = "*.{img,fat,ext,ext2,ext3,ext4,squashfs,ntfs,hfs,hfsx}", run = "archive" },
# font
{ mime = "font/*", run = "font" },
{ mime = "application/vnd.ms-opentype", run = "font" },
# empty file
{ mime = "inode/empty", run = "empty" },
# fallback
{ name = "*", run = "file" },
]

[input]
cursor_blink = false

# cd
cd_title  = "change directory:"
cd_origin = "center"
cd_offset = [ 0, 0, 50, 3 ]

# create
create_title = ["create:", "create (dir):"]
create_origin = "center"
create_offset = [ 0, 0, 50, 3 ]

# rename
rename_title  = "rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# filter
filter_title  = "filter:"
filter_origin = "bottom-left"
filter_offset = [ 0, -1, 50, 3 ]

# find
find_title  = [ "find next:", "find previous:" ]
find_origin = "bottom-left"
find_offset = [ 0, -1, 50, 3 ]

# search
search_title  = "search via {n}:"
search_origin = "bottom-left"
search_offset = [ 0, -1, 50, 3 ]

# shell
shell_title  = [ "shell:", "shell (block):" ]
shell_origin = "bottom-left"
shell_offset = [ 0, -1, 50, 3 ]

[confirm]
# trash
trash_title     = "trash {n} selected file{s}?"
trash_origin    = "center"
trash_offset    = [ 0, 0, 80, 30 ]

# delete
delete_title    = "permanently delete {n} selected file{s}?"
delete_origin   = "center"
delete_offset   = [ 0, 0, 80, 30 ]

# overwrite
overwrite_title   = "overwrite file?"
overwrite_content = "will overwrite the following file:"
overwrite_origin  = "center"
overwrite_offset  = [ 0, 0, 80, 30 ]

# quit
quit_title   = "quit?"
quit_content = "the following task is still running, are you sure you want to quit?"
quit_origin  = "center"
quit_offset  = [ 0, 0, 80, 30 ]

[pick]
open_title  = "open with:"
open_origin = "hovered"
open_offset = [ 0, 0, 80, 30 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false

[log]
enabled = false
