# /etc/security/limits.conf
#
#This file sets the resource limits for the users logged in via PAM.
#It does not affect resource limits of the system services.
#
#Also note that configuration files in /etc/security/limits.d directory,
#which are read in alphabetical order, override the settings in this
#file in case the domain is the same or more specific.
#That means, for example, that setting a limit for wildcard domain here
#can be overridden with a wildcard setting in a config file in the
#subdirectory, but a user specific setting here can be overridden only
#with a user specific setting in the subdirectory.
#
#Each line describes a limit for a user in the form:
#
#<domain>        <type>  <item>  <value>
#
#Where:
#<domain> can be:
#        - a user name
#        - a group name, with @group syntax
#        - the wildcard *, for default entry
#        - the wildcard %, can be also used with %group syntax,
#                 for maxlogin limit
#
#<type> can have the two values:
#        - "soft" for enforcing the soft limits
#        - "hard" for enforcing hard limits
#
#<item> can be one of the following:
#        - core - limits the core file size (KB)
#        - data - max data size (KB)
#        - fsize - maximum filesize (KB)
#        - memlock - max locked-in-memory address space (KB)
#        - nofile - max number of open file descriptors
#        - rss - max resident set size (KB)
#        - stack - max stack size (KB)
#        - cpu - max CPU time (MIN)
#        - nproc - max number of processes
#        - as - address space limit (KB)
#        - maxlogins - max number of logins for this user
#        - maxsyslogins - max number of logins on the system
#        - priority - the priority to run user process with
#        - locks - max number of file locks the user can hold
#        - sigpending - max number of pending signals
#        - msgqueue - max memory used by POSIX message queues (bytes)
#        - nice - max nice priority allowed to raise to values: [-20, 19]
#        - rtprio - max realtime priority
#
#<domain>      <type>  <item>         <value>
#

#*               soft    core            0
#*               hard    rss             10000
#@student        hard    nproc           20
#@faculty        soft    nproc           20
#@faculty        hard    nproc           50
#ftp             hard    nproc           0
#@student        -       maxlogins       4


# https://wiki.archlinux.org/title/Limits.conf


# core

# corefiles are useful for debugging, but annoying when normally using
# your system. you should have a soft limit of 0 and a hard limit of
# unlimited, and then temporarily raise your limit for the current
# shell with ulimit -c unlimited when you need corefiles for
# debugging.

*           soft    core       0           # prevent corefiles from being generated by default.
*           hard    core       unlimited   # allow corefiles to be temporarily enabled.


# nice

# you should disallow everyone except for root from having processes
# of minimal niceness (-20), so that root can fix an unresponsive
# system.

*           hard    nice       -19         # prevent non-root users from running a process at minimal niceness.
root        hard    nice       -20         # allows root to run a process at minimal niceness to fix the system when unresponsive.


# nofile

# this limits the number of file descriptors any process owned by the
# specified domain can have open at any one time. you may need to
# increase this value to something as high as 8192 for certain games
# to work. some database applications like mongodb or apache kafka
# recommend setting nofile to 64000 or 128000.

*           hard    nofile     65535
*           soft    nofile      8192       # required for certain games to run.
root        hard    nofile     65535
root        soft    nofile      8192       # required for certain games to run.


# nproc

# limit the number of processes each can run at once, therefore
# preventing fork bombs and other denial of service attacks.

# the current number of threads for each user can be found with `ps
# --no-headers -leo user | sort | uniq --count`

*           hard    nproc      2048        # prevent fork-bombs from taking out the system.

# whatever you set your nproc to, make sure to allow your root user to
# create as many processes as it wants; else, you might make your
# system inoperable by setting the normal nproc limit too low. note
# that this line has to come after the global hardlimit, and that the
# value below (65536) is arbitrary.

root        hard    nproc      65536       # prevent root from not being able to launch enough processes


# priority

# the default niceness should generally be 0, but you can set
# individual users and groups to have different default priorities
# using this parameter.

*           soft    priority   0           # set the default priority to neutral niceness.


# End of file
